{% extends "admin/base.jinja" %}
{% block content %}

<script src="https://cdnjs.cloudflare.com/ajax/libs/progressbar.js/1.1.0/progressbar.min.js" integrity="sha512-EZhmSl/hiKyEHklogkakFnSYa5mWsLmTC4ZfvVzhqYNLPbXKAXsjUYRf2O9OlzQN33H0xBVfGSEIUeqt9astHQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<style>
    #securityRing {
        width: 120px;
        transition: opacity 0.6s ease-in-out;
        opacity: 1;
        cursor: pointer;
    }
</style>

{% if domains_count == 0 or users_count == 0 %}
<div class="section tutorial">
    <div class="row">
        <div class="col-12">
            {% if domains_count == 0 %}
            <div class="mt-2 mb-3">–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω –≤ VPN.</div>
            <div class="mb-3">–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –¥–ª—è VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å {{ panel_domain }}.</div>
            <div class="mb-5">
                <a class="btn btn-primary mb-2" href="/{{ admin_uuid }}/domains/new/?next=dashboard">
                    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
                </a>
                <a class="btn btn-outline-primary mb-2" href="/{{ admin_uuid }}/domains/new/?domain={{ panel_domain }}&next=dashboard">
                    –Ø –ø–æ–Ω–∏–º–∞—é, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {{ panel_domain }}
                </a>
            </div>
            {% endif %}
            <div class="mt-3 mb-3">
                –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ On The Other Side VPN, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.
            </div>
            <div class="mb-5">
                <a class="btn btn-primary" href="/{{ admin_uuid }}/users/new/?next=dashboard">
                    Add new user
                </a>
            </div>
        </div>
    </div>
</div>
<hr />
{% endif %}

{% if no_domain_warning %}
<div class="w-100 mt-4 px-3">
    üö® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –∏–ª–∏ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –≤–∞—à–µ–π VPN. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π VPN, –ø–æ–∫–∞ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç–µ –¥–æ–º–µ–Ω.<br /><a href="/{{ admin_uuid }}/domains/new/?next=dashboard">Add a domain</a>
</div>
{% else %}
<div class="section stats row">
    <div class="col-12 col-sm-4 col-md-3 col-xxl-2 mt-3 mb-3 mt-sm-5 mb-sm-3 d-flex align-items-center justify-content-center">
        <div id="securityRing"></div>
    </div>
    <div class="col-12 col-sm-8 col-md-9 col-xxl-10 mt-3 mb-3 mt-sm-5 mb-sm-3 d-flex align-items-center justify-content-center">
        <div class="w-100 text-center text-sm-start">
            {% if warning_level == 0 %}
                <div style="font-weight: 700">On The Other Side –∞–∫—Ç–∏–≤–µ–Ω –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω!</div>
                <div class="mt-2">
                    –í–∞—à On The Other Side VPN –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
                </div>
            {% elif warning_level == 1 %}
                <div style="font-weight: 700">On The Other Side –∞–∫—Ç–∏–≤–µ–Ω –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω!</div>
                <div class="mt-2">
                    –í–∞—à On The Other Side VPN –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –Ω–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.
                </div>
                <div class="mt-2">
                    <a href="/{{ admin_uuid }}/security/">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–µ—Ç—ã</a>
                </div>
            {% else %}
                <div style="font-weight: 700">On The Other Side –∞–∫—Ç–∏–≤–µ–Ω</div>
                <div class="mt-2">
                    <i class="fa-solid fa-circle-exclamation warning-icon"></i> –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å On The Other Side VPN.
                </div>
                <div class="mt-2">
                    <a href="/{{ admin_uuid }}/security/">–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</a>
                </div>
            {% endif %}
        </div>
    </div>
</div>
{% endif %}

<script>
    var myProgress = new ProgressBar.Circle('#securityRing', {
        color: '#007bff',
        trailColor: '#eee',
        trailWidth: 1,
        duration: 1500,
        easing: 'easeOut',
        strokeWidth: 6,
        from: { color: '#ff0000' },
        to: { color: '#28a745' },
        step: function(state, circle) {
            circle.path.setAttribute('stroke', state.color);
            if (circle.value() == 0) {
                circle.setText('');
            } else {
                // circle.setText(Math.round(circle.value() * 10) + '/10');
                // set html content
                circle.setText('<div class="d-flex flex-column justify-content-center align-items-center text-center" style="margin-left: -20px; margin-right: -20px; margin-top: 6px;"><div style="font-size: 0.6em; font-weight: 700"><i class="fa-solid fa-circle-info px-1"></i>Availability score</div><div>' + Math.round(circle.value() * 10) + '/10</div><div style="font-size: 0.6em;"></div></div>');
                circle.text.style.color = state.color;
            }
        },
        text: {
            style: {
                color: '#28a745',
                position: 'absolute',
                left: '50%',
                top: '50%',
                padding: 0,
                margin: 0,
                transform: {
                    prefix: true,
                    value: 'translate(-50%, -50%)'
                },
                fontWeight: '700',      
            }
        }
    });

    setTimeout(function() {
        const secRing = document.getElementById('securityRing');
        secRing.style.opacity = 1;
        myProgress.animate({{ security_score }});
        let availabilityInfoModal = new bootstrap.Modal(document.getElementById('availabilityInfoModal'), {});
        secRing.addEventListener('click', function() {
            availabilityInfoModal.show();
        });
    }, 200);
</script>

<div class="modal fade" id="availabilityInfoModal" tabindex="-1" aria-labelledby="availabilityInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="availabilityInfoModalLabel">What is availability score?</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <p>
                –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ On The Other Side VPN - —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–∞—à On The Other Side VPN. –ß–µ–º –≤—ã—à–µ —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à On The Other Side VPN –∏ —Ç–µ–º –Ω–∞–¥–µ–∂–Ω–µ–µ –æ–Ω –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
            </p>
            <p>
                –í—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ On The Other Side VPN, —Å–ª–µ–¥—É—è —Å–æ–≤–µ—Ç–∞–º –Ω–∞ <a href="/{{ admin_uuid }}/security/">—ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a>.
            </p> 
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
        </div>
      </div>
    </div>
  </div>

<div class="section stats">
    <div class="row">
        <div class="col-12">
            <h6 class="bordered">–°—Ç–∞—Ç—É—Å VPN</h6>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value">{{ users_count }}</div>
            <div class="stats-item-desc">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value">{{ active_domains_count }}</div>
            <div class="stats-item-desc">–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value">{{ proxies_count }}</div>
            <div class="stats-item-desc">–í—Ç–æ—Ä–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value cpu-percent spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value ram-percent spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏</div>
        </div>
    </div>
</div>

<div class="section stats">
    <div class="row">
        <div class="col-12">
            <h6 class="bordered">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h6>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value ips-connected-right-now spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value users-connected-right-now spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</div>
        </div>
        <!-- <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value ips-connected-today spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">IP, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è</div>
        </div> -->
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value users-connected-today spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value traffic-today spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">–¢—Ä–∞—Ñ–∏–∫ —Å–µ–≥–æ–¥–Ω—è</div>
        </div>
        <div class="col-6 col-sm-4 stats-item">
            <div class="stats-item-value traffic-past-30-days spinner text-spinner">‚åõ</div>
            <div class="stats-item-desc">–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</div>
        </div>
    </div>
</div>
<div class="section stats">
    <div class="row">
        <div class="col-12">
            <h6 class="bordered">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏</h6>
            <div class="spinner">
                <canvas id="trafficChart" class="animated" style="width: 100%; height: 250px;"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="section stats">
    <div class="row">
        <div class="col-12">
            <h6 class="bordered">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏</h6>
            <div class="spinner">
                <canvas id="connectionChart" class="animated" style="width: 100%; height: 250px;"></canvas>
            </div>
        </div>
    </div>
</div>
<script>
    function parseStatsValue(val) {
        if (val == null || val == undefined) {
            return '-';
        }
        return val;
    }

    function getSystemStats() {
        fetch('/{{ admin_uuid }}/stats/system')
            .then(function(response) {
                return response.json()
            })
            .then(function(data) {
                document.querySelector('.cpu-percent').innerHTML = parseStatsValue(data.cpu);
                document.querySelector('.cpu-percent').classList.remove('spinner');
                document.querySelector('.ram-percent').innerHTML = parseStatsValue(data.ram);
                document.querySelector('.ram-percent').classList.remove('spinner');
            });
    }

    function getUserStats() {
        fetch('/{{ admin_uuid }}/stats/user')
            .then(function(response) {
                return response.json()
            })
            .then(function(data) {
                document.querySelector('.users-connected-right-now').innerHTML = parseStatsValue(data.users_now_long);
                document.querySelector('.users-connected-right-now').classList.remove('spinner');
                document.querySelector('.users-connected-today').innerHTML = parseStatsValue(data.users_today);
                document.querySelector('.users-connected-today').classList.remove('spinner');
                document.querySelector('.traffic-today').innerHTML = parseStatsValue(data.traffic_today);
                document.querySelector('.traffic-today').classList.remove('spinner');
                document.querySelector('.traffic-past-30-days').innerHTML = parseStatsValue(data.traffic_past_30_days);
                document.querySelector('.traffic-past-30-days').classList.remove('spinner');
                // document.querySelector('.ips-connected-today').innerHTML = parseStatsValue(data.ips_today);
                // document.querySelector('.ips-connected-today').classList.remove('spinner');
                document.querySelector('.ips-connected-right-now').innerHTML = parseStatsValue(data.ips_now_long);
                document.querySelector('.ips-connected-right-now').classList.remove('spinner');                
            });
    }

    function updateConnectionChart() {
        fetch('/{{ admin_uuid }}/stats/connections?days=30')
            .then(function(response) {
                return response.json()
            })
            .then(function(data) {
                const ctx = document.getElementById('connectionChart');
                ctx.innerHTML = "";

                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.x,
                        datasets: [{
                            label: 'IPs connected',
                            data: data.y,
                            borderWidth: 1,
                            fill: true,
                            backgroundColor: 'rgba(229, 89, 119, 0.2)',
                            borderColor: 'rgba(229, 89, 119, 1)',
                            pointRadius: 0,
                        }]
                    },
                    options: {
                        animation: {
                            duration: 0,
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index',
                        },
                        scales: {
                            y: {
                                title: {
                                    display: true,
                                    text: "Connected IPs",
                                },
                                beginAtZero: true,
                            }
                        },
                        plugins: {
                            legend: {
                                display: false,
                            },
                            zoom: {
                                zoom: {
                                    wheel: {
                                        enabled: true,
                                    },
                                    pinch: {
                                        enabled: true
                                    },
                                    mode: 'x',
                                },
                                pan: {
                                    enabled: true,
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });

                const chart = Chart.getChart(ctx);
                chart.resetZoom();
                if (window.innerWidth < 768) {
                    chart.options.scales.x.min = data.x[data.x.length - 3 * 24 * (60 / 10)];
                } else {
                    chart.options.scales.x.min = data.x[data.x.length - 7 * 24 * (60 / 10)];
                }
                chart.options.scales.x.max = data.x[data.x.length - 1];
                chart.update();
                
                ctx.classList.add('loaded');
                ctx.parentElement.classList.remove('spinner');
            });
    }

    function updateTrafficChart() {
        fetch('/{{ admin_uuid }}/stats/traffic?days=90')
            .then(function(response) {
                return response.json()
            })
            .then(function(data) {
                const ctx = document.getElementById('trafficChart');
                ctx.innerHTML = "";

                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.x,
                        datasets: [{
                            label: 'Traffic',
                            data: data.y,
                            borderWidth: 1,
                            fill: true,
                            backgroundColor: 'rgba(229, 89, 119, 0.2)',
                            borderColor: 'rgba(229, 89, 119, 1)',
                        }]
                    },
                    options: {
                        animation: {
                            duration: 0,
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index',
                        },
                        scales: {
                            y: {
                                title: {
                                    display: true,
                                    text: "Traffic (GB)",
                                },
                                beginAtZero: true,
                            }
                        },
                        plugins: {
                            legend: {
                                display: false,
                            },
                            zoom: {
                                zoom: {
                                    wheel: {
                                        enabled: true,
                                    },
                                    pinch: {
                                        enabled: true
                                    },
                                    mode: 'x',
                                },
                                pan: {
                                    enabled: true,
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });

                const chart = Chart.getChart(ctx);
                chart.resetZoom();
                if (window.innerWidth < 768) {
                    chart.options.scales.x.min = data.x[data.x.length - 14];
                } else {
                    chart.options.scales.x.min = data.x[data.x.length - 30];
                }
                chart.options.scales.x.max = data.x[data.x.length - 1];
                chart.update();

                ctx.classList.add('loaded');
                ctx.parentElement.classList.remove('spinner');
            });
    }

    setInterval(getSystemStats, 5000);
    setInterval(getUserStats, 5000);
    
    getSystemStats();
    getUserStats();
    // setTimeout(updateConnectionChart, 1000);
    // setTimeout(updateTrafficChart, 1000);
    setTimeout(function() {
        updateTrafficChart();
        updateConnectionChart();
    }, 1500);
</script>

{% endblock %}
