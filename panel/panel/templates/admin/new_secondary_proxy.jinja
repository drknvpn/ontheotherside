{% extends "admin/base.jinja" %}
{% block content %}
<style>
    p {
        margin-bottom: 4px;
    }

    i {
        opacity: 0.75;
    }
</style>
<h1 class="mt-5">Добавьте новый вторичный прокси-сервер</h1>
<div class="section">
    <div class="mt-5">
        <div class="form-group mb-4">
            <p>Вторичный прокси - это отдельный сервер, который будет туннелировать трафик на ваш основной сервер.</p>
            <p>Вы можете использовать его для резервирования или использовать домашний сервер в качестве вторичного прокси для улучшения качества соединения.</p>
        </div>
        <div class="form-group mb-3">
            <p>
                <strong>Tunnel type:</strong><span id="proxyTypeAutoSelectLabel"> Automatic</span>
            </p>
            <a href="#" id="showAdvancedOptions">Выберите тип туннеля вручную</a>
        </div>
        <div class="form-group mb-4" id="typesAdvanced" style="display: none">
            <div class="form-check mb-3">
                <input class="form-check-input" type="radio" name="proxyType" id="proxyTypeAuto" checked>
                <label class="form-check-label" for="proxyTypeAuto">
                    <p><strong>Автоматический</strong></p>
                    <p>Это позволит использовать SSH-туннель, если ваш вторичный сервер находится в стране с риском цензуры, в противном случае будет использоваться TCP-туннель.</p>
                </label>
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="radio" name="proxyType" id="proxyTypeTcp">
                <label class="form-check-label" for="proxyTypeTcp">
                    <p><strong>Туннель TCP</strong></p>
                    <p>Ваш вторичный сервер будет перенаправлять трафик на ваш основной сервер на уровне TCP.</p>
                    <p><i>Не рекомендуется, если ваш вторичный сервер находится НЕ в свободной стране</i></p>
                </label>
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="radio" name="proxyType" id="proxyTypeSsh">
                <label class="form-check-label" for="proxyTypeSsh">
                    <p><strong>Туннель SSH</strong></p>
                    <p>Ваш вторичный сервер будет перенаправлять трафик на ваш основной сервер через SSH-соединение.</p>
                    <p><i>Это может потребовать больше ресурсов как на вторичном, так и на главном сервере. Если у вас мало ресурсов, используйте вместо этого HTTPS-туннель.</i></p>
                </label>
            </div>
            <div class="form-check mb-3">
                <input class="form-check-input" type="radio" name="proxyType" id="proxyTypeHttps">
                <label class="form-check-label" for="proxyTypeHttps">
                    <p><strong>HTTPS-туннель</strong></p>
                    <p>Ваш вторичный сервер будет перенаправлять трафик на ваш основной сервер через HTTPS-соединения.</p>
                    <p></p>
                </label>
            </div>
        </div>
        <div class="form-group mt-3 mb-3">
            <strong>Для начала скопируйте и вставьте следующую команду в оболочку SSH вашего вторичного сервера:</strong><br /><br />
            <code id="codeToCopy"></code>
            <br />
            <br />
            <button class="btn btn-outline-primary btn-copy">
                Скопируйте код в буфер обмена
            </button>
        </div>
        <div class="form-group mb-4 text-center" style="margin-top: 72px;">
            <div class="spinner"></div><br>
            <div class="mt-2">
                Ждем подключения вашего сервера...
            </div>
        </div>

        <script>
            function getProxies() {
                return fetch("/{{ admin_uuid }}/api/proxies/online")
                    .then(response => response.json())
                    .then(data => {
                        console.log("Active proxies:", data.length);
                        var ips = [];
                        data.forEach(function(proxy) {
                            ips.push(proxy['ip']);
                        });
                        return new Promise(function(resolve, reject) {
                            resolve(ips);
                        });
                    });
            }

            getProxies().then(initialList => {
                setInterval(function() {
                    getProxies().then(newList => {
                        newList.forEach(function(proxy) {
                            if (!initialList.includes(proxy)) {
                                console.log("New proxy:", proxy)
                                window.location.href = "/{{ admin_uuid }}/domains/" + proxy + "/?new=true";
                            }
                        });
                    });
                }, 8000);
            })

        </script>
    </div>
</div>

<script>
    // show advanced options if proxyTypeBasicManual is selected, and hide it if not
    var typesAdvanced = document.getElementById("typesAdvanced");

    var proxyTypeAuto = document.getElementById("proxyTypeAuto");
    var proxyTypeTcp = document.getElementById("proxyTypeTcp");
    var proxyTypeSsh = document.getElementById("proxyTypeSsh");
    var proxyTypeHttps = document.getElementById("proxyTypeHttps");

    function getServerType() {
        if (proxyTypeTcp.checked) {
            return "tcp";
        } else if (proxyTypeSsh.checked) {
            return "ssh";
        } else if (proxyTypeHttps.checked) {
            return "https";
        }
        return "auto";
    }

    function setCodeToCopy() {
        var code = "{{ bootstrap_env }}curl -s {{ bootstrap_script_url }} -o /tmp/bootstrap.sh && bash /tmp/bootstrap.sh install-proxy https://{{ panel_domain }}/{{ proxy_configuration_uuid }} ";
        code += getServerType();
        document.getElementById("codeToCopy").innerHTML = code;
    }

    document.getElementById("showAdvancedOptions").addEventListener("click", function() {
        typesAdvanced.style.display = "block";
        document.getElementById("showAdvancedOptions").style.display = "none";
        document.getElementById("proxyTypeAutoSelectLabel").innerText = "";
    });

    proxyTypeAuto.addEventListener("click", function() {
        setCodeToCopy();
    });
    proxyTypeTcp.addEventListener("click", function() {
        setCodeToCopy();
    });
    proxyTypeSsh.addEventListener("click", function() {
        setCodeToCopy();
    });
    proxyTypeHttps.addEventListener("click", function() {
        setCodeToCopy();
    });
    
    function copyCode() {
        var codeToCopy = document.querySelector("#codeToCopy").innerText;
        navigator.clipboard.writeText(codeToCopy);

        document.querySelector(".btn-copy").innerText = "Copied!";
        setTimeout(function() {
            document.querySelector(".btn-copy").innerText = "Copy code to clipboard";
        }, 2000);
    }

    document.querySelector("#codeToCopy").addEventListener("click", function() {
        copyCode();

        // select the whole code
        var range = document.createRange();
        range.selectNode(document.querySelector("#codeToCopy"));
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range);
    });

    document.querySelector(".btn-copy").addEventListener("click", function() {
        copyCode();
    });

    setCodeToCopy();
</script>

{% endblock %}
